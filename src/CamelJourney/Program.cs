// Количество бананов
using System.Diagnostics;

const int N = 3000;

// Расстояние
const int L = 1000;

// Грузоподъемность верблюда
const int C = 1000;

// будем контролировать уровень вложенности рекурсии
int I = 0;

// Сколько бананов возмжно доставить из n штук на расстояние l км
int S(int n, int l)
{
    I++;

    /*
    if(I % 1000 == 0)
    {
        Console.WriteLine($"Recursion: {I}"); 
    }
    */

    if (l == 1)
    {
        I--;
        return S1(n);
    }

    // мы можем доставить сначала сколько возможно бананов на дистанцию x
    // а потом их перевезти на дистанцию l - x при этом из всех возможных х
    // выбираем самое лучшее
    var y = new int[l - 1];
    for (var x = 1; x <= l - 1; x++)
    {
        y[x - 1] = S(S(n, x), l - x);
    }

    I--;
    return y.Max();
}


// Сколько бананов возмжно доставить из n штук на расстояние 1 км
static int S1(int n)
{
    // если бананов С или меньше, то просто отвозим все
    // если С + 1, или С + 2, или С + 3, то на базе остается 1, 2, или 3 банана
    // и возвращаться за ними нет смысла
    if (n <= C + 3)
    {
        return Math.Min(n, C) - 1;
    }
    // иначе мы берем с собой С бананов, а потом возвращаемся за остальными
    // до следующей точки мы довезем С - 1 и еще 1 надо взять на обратную дорогу
    // на базе при этом будет лежать n - C бананов, которые тоже надо перевезти
    else
    {
        return C - 2 + S1(n - C);
    }

}

var sw = Stopwatch.StartNew();
Console.WriteLine($"Привет, вот ваши {S(N, L)} бананов.");
sw.Stop();
Console.WriteLine($"На расчет ушло {sw.Elapsed}.");
// Console.WriteLine(S1(3000));
